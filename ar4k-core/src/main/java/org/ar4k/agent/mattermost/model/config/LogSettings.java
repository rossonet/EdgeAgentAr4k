// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * Copyright (c) 2016-present, Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model.config;

/**
 * Log settings.
 * 
 * @author Takayuki Maruyama
 */
public class LogSettings {
  private boolean enableConsole;
  private String consoleLevel;
  private boolean enableFile;
  private String fileLevel;
  private String fileLocation;
  private boolean enableWebhookDebugging;
  private boolean enableDiagnostics;
  /* @since Mattermost Server 4.10 */
  private boolean fileJson = true;
  /* @since Mattermost Server 4.10 */
  private boolean consoleJson = true;

  @java.lang.SuppressWarnings("all")
  public LogSettings() {
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableConsole() {
    return this.enableConsole;
  }

  @java.lang.SuppressWarnings("all")
  public String getConsoleLevel() {
    return this.consoleLevel;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableFile() {
    return this.enableFile;
  }

  @java.lang.SuppressWarnings("all")
  public String getFileLevel() {
    return this.fileLevel;
  }

  @java.lang.SuppressWarnings("all")
  public String getFileLocation() {
    return this.fileLocation;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableWebhookDebugging() {
    return this.enableWebhookDebugging;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableDiagnostics() {
    return this.enableDiagnostics;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isFileJson() {
    return this.fileJson;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isConsoleJson() {
    return this.consoleJson;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableConsole(final boolean enableConsole) {
    this.enableConsole = enableConsole;
  }

  @java.lang.SuppressWarnings("all")
  public void setConsoleLevel(final String consoleLevel) {
    this.consoleLevel = consoleLevel;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableFile(final boolean enableFile) {
    this.enableFile = enableFile;
  }

  @java.lang.SuppressWarnings("all")
  public void setFileLevel(final String fileLevel) {
    this.fileLevel = fileLevel;
  }

  @java.lang.SuppressWarnings("all")
  public void setFileLocation(final String fileLocation) {
    this.fileLocation = fileLocation;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableWebhookDebugging(final boolean enableWebhookDebugging) {
    this.enableWebhookDebugging = enableWebhookDebugging;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableDiagnostics(final boolean enableDiagnostics) {
    this.enableDiagnostics = enableDiagnostics;
  }

  @java.lang.SuppressWarnings("all")
  public void setFileJson(final boolean fileJson) {
    this.fileJson = fileJson;
  }

  @java.lang.SuppressWarnings("all")
  public void setConsoleJson(final boolean consoleJson) {
    this.consoleJson = consoleJson;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof LogSettings)) return false;
    final LogSettings other = (LogSettings) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    if (this.isEnableConsole() != other.isEnableConsole()) return false;
    if (this.isEnableFile() != other.isEnableFile()) return false;
    if (this.isEnableWebhookDebugging() != other.isEnableWebhookDebugging()) return false;
    if (this.isEnableDiagnostics() != other.isEnableDiagnostics()) return false;
    if (this.isFileJson() != other.isFileJson()) return false;
    if (this.isConsoleJson() != other.isConsoleJson()) return false;
    final java.lang.Object this$consoleLevel = this.getConsoleLevel();
    final java.lang.Object other$consoleLevel = other.getConsoleLevel();
    if (this$consoleLevel == null ? other$consoleLevel != null : !this$consoleLevel.equals(other$consoleLevel)) return false;
    final java.lang.Object this$fileLevel = this.getFileLevel();
    final java.lang.Object other$fileLevel = other.getFileLevel();
    if (this$fileLevel == null ? other$fileLevel != null : !this$fileLevel.equals(other$fileLevel)) return false;
    final java.lang.Object this$fileLocation = this.getFileLocation();
    final java.lang.Object other$fileLocation = other.getFileLocation();
    if (this$fileLocation == null ? other$fileLocation != null : !this$fileLocation.equals(other$fileLocation)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof LogSettings;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + (this.isEnableConsole() ? 79 : 97);
    result = result * PRIME + (this.isEnableFile() ? 79 : 97);
    result = result * PRIME + (this.isEnableWebhookDebugging() ? 79 : 97);
    result = result * PRIME + (this.isEnableDiagnostics() ? 79 : 97);
    result = result * PRIME + (this.isFileJson() ? 79 : 97);
    result = result * PRIME + (this.isConsoleJson() ? 79 : 97);
    final java.lang.Object $consoleLevel = this.getConsoleLevel();
    result = result * PRIME + ($consoleLevel == null ? 43 : $consoleLevel.hashCode());
    final java.lang.Object $fileLevel = this.getFileLevel();
    result = result * PRIME + ($fileLevel == null ? 43 : $fileLevel.hashCode());
    final java.lang.Object $fileLocation = this.getFileLocation();
    result = result * PRIME + ($fileLocation == null ? 43 : $fileLocation.hashCode());
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "LogSettings(enableConsole=" + this.isEnableConsole() + ", consoleLevel=" + this.getConsoleLevel() + ", enableFile=" + this.isEnableFile() + ", fileLevel=" + this.getFileLevel() + ", fileLocation=" + this.getFileLocation() + ", enableWebhookDebugging=" + this.isEnableWebhookDebugging() + ", enableDiagnostics=" + this.isEnableDiagnostics() + ", fileJson=" + this.isFileJson() + ", consoleJson=" + this.isConsoleJson() + ")";
  }
}
