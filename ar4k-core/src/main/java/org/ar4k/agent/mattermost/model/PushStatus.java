// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * Copyright (c) 2017-present, Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.IOException;

import org.ar4k.agent.mattermost.model.PushStatus.PushStatusDeserializer;
import org.ar4k.agent.mattermost.model.serialize.HasCodeSerializer;

/**
 * The type of push notification status.
 * 
 * @author Takayuki Maruyama
 */
@JsonSerialize(using = HasCodeSerializer.class)
@JsonDeserialize(using = PushStatusDeserializer.class)
public enum PushStatus implements HasCode<PushStatus> {
  OK("OK"), FAIL("FAIL"), REMOVE("REMOVE");
  private final String code;

  private PushStatus(String code) {
    this.code = code;
  }


  static class PushStatusDeserializer extends JsonDeserializer<PushStatus> {
    @Override
    public PushStatus deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
      String jsonValue = p.getText();
      return HasCode.of(PushStatus::values, jsonValue, null);
    }
  }

  @java.lang.SuppressWarnings("all")
  public String getCode() {
    return this.code;
  }
}
