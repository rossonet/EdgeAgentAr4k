// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * Copyright (c) 2016-present, Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model.config;

/**
 * Localization settings.
 * 
 * @author Takayuki Maruyama
 */
public class LocalizationSettings {
  private String defaultServerLocale;
  private String defaultClientLocale;
  private String availableLocales;

  @java.lang.SuppressWarnings("all")
  public LocalizationSettings() {
  }

  @java.lang.SuppressWarnings("all")
  public String getDefaultServerLocale() {
    return this.defaultServerLocale;
  }

  @java.lang.SuppressWarnings("all")
  public String getDefaultClientLocale() {
    return this.defaultClientLocale;
  }

  @java.lang.SuppressWarnings("all")
  public String getAvailableLocales() {
    return this.availableLocales;
  }

  @java.lang.SuppressWarnings("all")
  public void setDefaultServerLocale(final String defaultServerLocale) {
    this.defaultServerLocale = defaultServerLocale;
  }

  @java.lang.SuppressWarnings("all")
  public void setDefaultClientLocale(final String defaultClientLocale) {
    this.defaultClientLocale = defaultClientLocale;
  }

  @java.lang.SuppressWarnings("all")
  public void setAvailableLocales(final String availableLocales) {
    this.availableLocales = availableLocales;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof LocalizationSettings)) return false;
    final LocalizationSettings other = (LocalizationSettings) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    final java.lang.Object this$defaultServerLocale = this.getDefaultServerLocale();
    final java.lang.Object other$defaultServerLocale = other.getDefaultServerLocale();
    if (this$defaultServerLocale == null ? other$defaultServerLocale != null : !this$defaultServerLocale.equals(other$defaultServerLocale)) return false;
    final java.lang.Object this$defaultClientLocale = this.getDefaultClientLocale();
    final java.lang.Object other$defaultClientLocale = other.getDefaultClientLocale();
    if (this$defaultClientLocale == null ? other$defaultClientLocale != null : !this$defaultClientLocale.equals(other$defaultClientLocale)) return false;
    final java.lang.Object this$availableLocales = this.getAvailableLocales();
    final java.lang.Object other$availableLocales = other.getAvailableLocales();
    if (this$availableLocales == null ? other$availableLocales != null : !this$availableLocales.equals(other$availableLocales)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof LocalizationSettings;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final java.lang.Object $defaultServerLocale = this.getDefaultServerLocale();
    result = result * PRIME + ($defaultServerLocale == null ? 43 : $defaultServerLocale.hashCode());
    final java.lang.Object $defaultClientLocale = this.getDefaultClientLocale();
    result = result * PRIME + ($defaultClientLocale == null ? 43 : $defaultClientLocale.hashCode());
    final java.lang.Object $availableLocales = this.getAvailableLocales();
    result = result * PRIME + ($availableLocales == null ? 43 : $availableLocales.hashCode());
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "LocalizationSettings(defaultServerLocale=" + this.getDefaultServerLocale() + ", defaultClientLocale=" + this.getDefaultClientLocale() + ", availableLocales=" + this.getAvailableLocales() + ")";
  }
}
