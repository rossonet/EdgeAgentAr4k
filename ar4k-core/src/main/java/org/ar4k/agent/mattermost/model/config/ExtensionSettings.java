// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * @(#) org.ar4k.agent.core.mattermost.model.config.ExtensionSettings Copyright (c) 2018 Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model.config;

import java.util.List;

/**
 * Extension settings.
 * 
 * @author Takayuki Maruyama
 * @since Mattermost Server 5.2
 */
public class ExtensionSettings {
  private boolean enableExperimentalExtensions;
  private List<String> allowedExtensionsIDs;

  @java.lang.SuppressWarnings("all")
  public ExtensionSettings() {
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableExperimentalExtensions() {
    return this.enableExperimentalExtensions;
  }

  @java.lang.SuppressWarnings("all")
  public List<String> getAllowedExtensionsIDs() {
    return this.allowedExtensionsIDs;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableExperimentalExtensions(final boolean enableExperimentalExtensions) {
    this.enableExperimentalExtensions = enableExperimentalExtensions;
  }

  @java.lang.SuppressWarnings("all")
  public void setAllowedExtensionsIDs(final List<String> allowedExtensionsIDs) {
    this.allowedExtensionsIDs = allowedExtensionsIDs;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof ExtensionSettings)) return false;
    final ExtensionSettings other = (ExtensionSettings) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    if (this.isEnableExperimentalExtensions() != other.isEnableExperimentalExtensions()) return false;
    final java.lang.Object this$allowedExtensionsIDs = this.getAllowedExtensionsIDs();
    final java.lang.Object other$allowedExtensionsIDs = other.getAllowedExtensionsIDs();
    if (this$allowedExtensionsIDs == null ? other$allowedExtensionsIDs != null : !this$allowedExtensionsIDs.equals(other$allowedExtensionsIDs)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof ExtensionSettings;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + (this.isEnableExperimentalExtensions() ? 79 : 97);
    final java.lang.Object $allowedExtensionsIDs = this.getAllowedExtensionsIDs();
    result = result * PRIME + ($allowedExtensionsIDs == null ? 43 : $allowedExtensionsIDs.hashCode());
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "ExtensionSettings(enableExperimentalExtensions=" + this.isEnableExperimentalExtensions() + ", allowedExtensionsIDs=" + this.getAllowedExtensionsIDs() + ")";
  }
}
