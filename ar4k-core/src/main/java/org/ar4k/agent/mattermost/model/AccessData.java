// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * Copyright (c) 2016-present, Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Access data.
 * 
 * @author Takayuki Maruyama
 */
public class AccessData {
  @JsonProperty("client_id")
  private String clientId;
  @JsonProperty("user_id")
  private String userId;
  @JsonProperty("token")
  private String token;
  @JsonProperty("refresh_token")
  private String refreshToken;
  @JsonProperty("redirect_url")
  private String redirectUri;
  @JsonProperty("expires_at")
  private long expiresAt;
  @JsonProperty("scope")
  private String scope;

  @java.lang.SuppressWarnings("all")
  public AccessData() {
  }

  @java.lang.SuppressWarnings("all")
  public String getClientId() {
    return this.clientId;
  }

  @java.lang.SuppressWarnings("all")
  public String getUserId() {
    return this.userId;
  }

  @java.lang.SuppressWarnings("all")
  public String getToken() {
    return this.token;
  }

  @java.lang.SuppressWarnings("all")
  public String getRefreshToken() {
    return this.refreshToken;
  }

  @java.lang.SuppressWarnings("all")
  public String getRedirectUri() {
    return this.redirectUri;
  }

  @java.lang.SuppressWarnings("all")
  public long getExpiresAt() {
    return this.expiresAt;
  }

  @java.lang.SuppressWarnings("all")
  public String getScope() {
    return this.scope;
  }

  @JsonProperty("client_id")
  @java.lang.SuppressWarnings("all")
  public void setClientId(final String clientId) {
    this.clientId = clientId;
  }

  @JsonProperty("user_id")
  @java.lang.SuppressWarnings("all")
  public void setUserId(final String userId) {
    this.userId = userId;
  }

  @JsonProperty("token")
  @java.lang.SuppressWarnings("all")
  public void setToken(final String token) {
    this.token = token;
  }

  @JsonProperty("refresh_token")
  @java.lang.SuppressWarnings("all")
  public void setRefreshToken(final String refreshToken) {
    this.refreshToken = refreshToken;
  }

  @JsonProperty("redirect_url")
  @java.lang.SuppressWarnings("all")
  public void setRedirectUri(final String redirectUri) {
    this.redirectUri = redirectUri;
  }

  @JsonProperty("expires_at")
  @java.lang.SuppressWarnings("all")
  public void setExpiresAt(final long expiresAt) {
    this.expiresAt = expiresAt;
  }

  @JsonProperty("scope")
  @java.lang.SuppressWarnings("all")
  public void setScope(final String scope) {
    this.scope = scope;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof AccessData)) return false;
    final AccessData other = (AccessData) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    if (this.getExpiresAt() != other.getExpiresAt()) return false;
    final java.lang.Object this$clientId = this.getClientId();
    final java.lang.Object other$clientId = other.getClientId();
    if (this$clientId == null ? other$clientId != null : !this$clientId.equals(other$clientId)) return false;
    final java.lang.Object this$userId = this.getUserId();
    final java.lang.Object other$userId = other.getUserId();
    if (this$userId == null ? other$userId != null : !this$userId.equals(other$userId)) return false;
    final java.lang.Object this$token = this.getToken();
    final java.lang.Object other$token = other.getToken();
    if (this$token == null ? other$token != null : !this$token.equals(other$token)) return false;
    final java.lang.Object this$refreshToken = this.getRefreshToken();
    final java.lang.Object other$refreshToken = other.getRefreshToken();
    if (this$refreshToken == null ? other$refreshToken != null : !this$refreshToken.equals(other$refreshToken)) return false;
    final java.lang.Object this$redirectUri = this.getRedirectUri();
    final java.lang.Object other$redirectUri = other.getRedirectUri();
    if (this$redirectUri == null ? other$redirectUri != null : !this$redirectUri.equals(other$redirectUri)) return false;
    final java.lang.Object this$scope = this.getScope();
    final java.lang.Object other$scope = other.getScope();
    if (this$scope == null ? other$scope != null : !this$scope.equals(other$scope)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof AccessData;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final long $expiresAt = this.getExpiresAt();
    result = result * PRIME + (int) ($expiresAt >>> 32 ^ $expiresAt);
    final java.lang.Object $clientId = this.getClientId();
    result = result * PRIME + ($clientId == null ? 43 : $clientId.hashCode());
    final java.lang.Object $userId = this.getUserId();
    result = result * PRIME + ($userId == null ? 43 : $userId.hashCode());
    final java.lang.Object $token = this.getToken();
    result = result * PRIME + ($token == null ? 43 : $token.hashCode());
    final java.lang.Object $refreshToken = this.getRefreshToken();
    result = result * PRIME + ($refreshToken == null ? 43 : $refreshToken.hashCode());
    final java.lang.Object $redirectUri = this.getRedirectUri();
    result = result * PRIME + ($redirectUri == null ? 43 : $redirectUri.hashCode());
    final java.lang.Object $scope = this.getScope();
    result = result * PRIME + ($scope == null ? 43 : $scope.hashCode());
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "AccessData(clientId=" + this.getClientId() + ", userId=" + this.getUserId() + ", token=" + this.getToken() + ", refreshToken=" + this.getRefreshToken() + ", redirectUri=" + this.getRedirectUri() + ", expiresAt=" + this.getExpiresAt() + ", scope=" + this.getScope() + ")";
  }
}
