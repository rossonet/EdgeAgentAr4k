// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * Copyright (c) 2016-present, Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model.config;

import java.util.List;

import org.ar4k.agent.mattermost.model.config.consts.Permissions;
import org.ar4k.agent.mattermost.model.config.consts.RestrictDirectMessage;
import org.ar4k.agent.mattermost.model.config.consts.TeammateNameDisplay;

/**
 * Team settings.
 * 
 * @author Takayuki Maruyama
 */
public class TeamSettings {
  private String siteName;
  private int maxUsersPerTeam;
  private boolean enableTeamCreation;
  private boolean enableUserCreation;
  private boolean enableOpenServer;
  /* @since Mattermost Server XXX what ver? */
  private boolean enableUserDeactivate;
  private String restrictCreationToDomains;
  private boolean enableCustomBrand;
  private String customBrandText;
  private String customDescriptionText;
  private RestrictDirectMessage restrictDirectMessage;
  private Permissions restrictTeamInvite;
  private Permissions restrictPublicChannelManagement;
  private Permissions restrictPrivateChannelManagement;
  private Permissions restrictPublicChannelCreation;
  private Permissions restrictPrivateChannelCreation;
  private Permissions restrictPublicChannelDeletion;
  private Permissions restrictPrivateChannelDeletion;
  private Permissions restrictPrivateChannelManageMembers;
  private long userStatusAwayTimeout;
  private long maxChannelsPerTeam;
  private long maxNotificationsPerChannel;
  /* @since Mattermost Server 4.0 */
  private TeammateNameDisplay teammateNameDisplay;
  /* @since Mattermost Server 4.2 */
  private boolean enableXtoLeaveChannelsFromLhs;
  /* @since Mattermost Server 4.2 (Enterprise Edition) */
  private boolean experimentalTownSquareIsReadOnly;
  /* @since Mattermost Server 4.4 */
  private boolean enableConfirmNotificationsToChannel = true;
  /* @since Mattermost Server 4.6 */
  private String experimentalPrimaryTeam;
  /* @since Mattermost Server 4.10 */
  private boolean experimentalEnableAutomaticReplies;
  /* @since Mattermost Server 5.0 */
  private boolean enableUserDeactivation;
  /* @since Mattermost Server 5.0 */
  private boolean experimentalHideTownSquareinLhs;
  /* @since Mattermost Server 5.2 */
  private boolean experimentalViewArchivedChannels;
  /* @since Mattermost Server 5.2 */
  private List<String> experimentalDefaultChannels;
  /* @since Mattermost Server 5.18 */
  private boolean lockTeammateNameDisplay;

  @java.lang.SuppressWarnings("all")
  public TeamSettings() {
  }

  @java.lang.SuppressWarnings("all")
  public String getSiteName() {
    return this.siteName;
  }

  @java.lang.SuppressWarnings("all")
  public int getMaxUsersPerTeam() {
    return this.maxUsersPerTeam;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableTeamCreation() {
    return this.enableTeamCreation;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableUserCreation() {
    return this.enableUserCreation;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableOpenServer() {
    return this.enableOpenServer;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableUserDeactivate() {
    return this.enableUserDeactivate;
  }

  @java.lang.SuppressWarnings("all")
  public String getRestrictCreationToDomains() {
    return this.restrictCreationToDomains;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableCustomBrand() {
    return this.enableCustomBrand;
  }

  @java.lang.SuppressWarnings("all")
  public String getCustomBrandText() {
    return this.customBrandText;
  }

  @java.lang.SuppressWarnings("all")
  public String getCustomDescriptionText() {
    return this.customDescriptionText;
  }

  @java.lang.SuppressWarnings("all")
  public RestrictDirectMessage getRestrictDirectMessage() {
    return this.restrictDirectMessage;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictTeamInvite() {
    return this.restrictTeamInvite;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictPublicChannelManagement() {
    return this.restrictPublicChannelManagement;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictPrivateChannelManagement() {
    return this.restrictPrivateChannelManagement;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictPublicChannelCreation() {
    return this.restrictPublicChannelCreation;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictPrivateChannelCreation() {
    return this.restrictPrivateChannelCreation;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictPublicChannelDeletion() {
    return this.restrictPublicChannelDeletion;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictPrivateChannelDeletion() {
    return this.restrictPrivateChannelDeletion;
  }

  @java.lang.SuppressWarnings("all")
  public Permissions getRestrictPrivateChannelManageMembers() {
    return this.restrictPrivateChannelManageMembers;
  }

  @java.lang.SuppressWarnings("all")
  public long getUserStatusAwayTimeout() {
    return this.userStatusAwayTimeout;
  }

  @java.lang.SuppressWarnings("all")
  public long getMaxChannelsPerTeam() {
    return this.maxChannelsPerTeam;
  }

  @java.lang.SuppressWarnings("all")
  public long getMaxNotificationsPerChannel() {
    return this.maxNotificationsPerChannel;
  }

  @java.lang.SuppressWarnings("all")
  public TeammateNameDisplay getTeammateNameDisplay() {
    return this.teammateNameDisplay;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableXtoLeaveChannelsFromLhs() {
    return this.enableXtoLeaveChannelsFromLhs;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isExperimentalTownSquareIsReadOnly() {
    return this.experimentalTownSquareIsReadOnly;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableConfirmNotificationsToChannel() {
    return this.enableConfirmNotificationsToChannel;
  }

  @java.lang.SuppressWarnings("all")
  public String getExperimentalPrimaryTeam() {
    return this.experimentalPrimaryTeam;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isExperimentalEnableAutomaticReplies() {
    return this.experimentalEnableAutomaticReplies;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isEnableUserDeactivation() {
    return this.enableUserDeactivation;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isExperimentalHideTownSquareinLhs() {
    return this.experimentalHideTownSquareinLhs;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isExperimentalViewArchivedChannels() {
    return this.experimentalViewArchivedChannels;
  }

  @java.lang.SuppressWarnings("all")
  public List<String> getExperimentalDefaultChannels() {
    return this.experimentalDefaultChannels;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isLockTeammateNameDisplay() {
    return this.lockTeammateNameDisplay;
  }

  @java.lang.SuppressWarnings("all")
  public void setSiteName(final String siteName) {
    this.siteName = siteName;
  }

  @java.lang.SuppressWarnings("all")
  public void setMaxUsersPerTeam(final int maxUsersPerTeam) {
    this.maxUsersPerTeam = maxUsersPerTeam;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableTeamCreation(final boolean enableTeamCreation) {
    this.enableTeamCreation = enableTeamCreation;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableUserCreation(final boolean enableUserCreation) {
    this.enableUserCreation = enableUserCreation;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableOpenServer(final boolean enableOpenServer) {
    this.enableOpenServer = enableOpenServer;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableUserDeactivate(final boolean enableUserDeactivate) {
    this.enableUserDeactivate = enableUserDeactivate;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictCreationToDomains(final String restrictCreationToDomains) {
    this.restrictCreationToDomains = restrictCreationToDomains;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableCustomBrand(final boolean enableCustomBrand) {
    this.enableCustomBrand = enableCustomBrand;
  }

  @java.lang.SuppressWarnings("all")
  public void setCustomBrandText(final String customBrandText) {
    this.customBrandText = customBrandText;
  }

  @java.lang.SuppressWarnings("all")
  public void setCustomDescriptionText(final String customDescriptionText) {
    this.customDescriptionText = customDescriptionText;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictDirectMessage(final RestrictDirectMessage restrictDirectMessage) {
    this.restrictDirectMessage = restrictDirectMessage;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictTeamInvite(final Permissions restrictTeamInvite) {
    this.restrictTeamInvite = restrictTeamInvite;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictPublicChannelManagement(final Permissions restrictPublicChannelManagement) {
    this.restrictPublicChannelManagement = restrictPublicChannelManagement;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictPrivateChannelManagement(final Permissions restrictPrivateChannelManagement) {
    this.restrictPrivateChannelManagement = restrictPrivateChannelManagement;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictPublicChannelCreation(final Permissions restrictPublicChannelCreation) {
    this.restrictPublicChannelCreation = restrictPublicChannelCreation;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictPrivateChannelCreation(final Permissions restrictPrivateChannelCreation) {
    this.restrictPrivateChannelCreation = restrictPrivateChannelCreation;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictPublicChannelDeletion(final Permissions restrictPublicChannelDeletion) {
    this.restrictPublicChannelDeletion = restrictPublicChannelDeletion;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictPrivateChannelDeletion(final Permissions restrictPrivateChannelDeletion) {
    this.restrictPrivateChannelDeletion = restrictPrivateChannelDeletion;
  }

  @java.lang.SuppressWarnings("all")
  public void setRestrictPrivateChannelManageMembers(final Permissions restrictPrivateChannelManageMembers) {
    this.restrictPrivateChannelManageMembers = restrictPrivateChannelManageMembers;
  }

  @java.lang.SuppressWarnings("all")
  public void setUserStatusAwayTimeout(final long userStatusAwayTimeout) {
    this.userStatusAwayTimeout = userStatusAwayTimeout;
  }

  @java.lang.SuppressWarnings("all")
  public void setMaxChannelsPerTeam(final long maxChannelsPerTeam) {
    this.maxChannelsPerTeam = maxChannelsPerTeam;
  }

  @java.lang.SuppressWarnings("all")
  public void setMaxNotificationsPerChannel(final long maxNotificationsPerChannel) {
    this.maxNotificationsPerChannel = maxNotificationsPerChannel;
  }

  @java.lang.SuppressWarnings("all")
  public void setTeammateNameDisplay(final TeammateNameDisplay teammateNameDisplay) {
    this.teammateNameDisplay = teammateNameDisplay;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableXtoLeaveChannelsFromLhs(final boolean enableXtoLeaveChannelsFromLhs) {
    this.enableXtoLeaveChannelsFromLhs = enableXtoLeaveChannelsFromLhs;
  }

  @java.lang.SuppressWarnings("all")
  public void setExperimentalTownSquareIsReadOnly(final boolean experimentalTownSquareIsReadOnly) {
    this.experimentalTownSquareIsReadOnly = experimentalTownSquareIsReadOnly;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableConfirmNotificationsToChannel(final boolean enableConfirmNotificationsToChannel) {
    this.enableConfirmNotificationsToChannel = enableConfirmNotificationsToChannel;
  }

  @java.lang.SuppressWarnings("all")
  public void setExperimentalPrimaryTeam(final String experimentalPrimaryTeam) {
    this.experimentalPrimaryTeam = experimentalPrimaryTeam;
  }

  @java.lang.SuppressWarnings("all")
  public void setExperimentalEnableAutomaticReplies(final boolean experimentalEnableAutomaticReplies) {
    this.experimentalEnableAutomaticReplies = experimentalEnableAutomaticReplies;
  }

  @java.lang.SuppressWarnings("all")
  public void setEnableUserDeactivation(final boolean enableUserDeactivation) {
    this.enableUserDeactivation = enableUserDeactivation;
  }

  @java.lang.SuppressWarnings("all")
  public void setExperimentalHideTownSquareinLhs(final boolean experimentalHideTownSquareinLhs) {
    this.experimentalHideTownSquareinLhs = experimentalHideTownSquareinLhs;
  }

  @java.lang.SuppressWarnings("all")
  public void setExperimentalViewArchivedChannels(final boolean experimentalViewArchivedChannels) {
    this.experimentalViewArchivedChannels = experimentalViewArchivedChannels;
  }

  @java.lang.SuppressWarnings("all")
  public void setExperimentalDefaultChannels(final List<String> experimentalDefaultChannels) {
    this.experimentalDefaultChannels = experimentalDefaultChannels;
  }

  @java.lang.SuppressWarnings("all")
  public void setLockTeammateNameDisplay(final boolean lockTeammateNameDisplay) {
    this.lockTeammateNameDisplay = lockTeammateNameDisplay;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof TeamSettings)) return false;
    final TeamSettings other = (TeamSettings) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    if (this.getMaxUsersPerTeam() != other.getMaxUsersPerTeam()) return false;
    if (this.isEnableTeamCreation() != other.isEnableTeamCreation()) return false;
    if (this.isEnableUserCreation() != other.isEnableUserCreation()) return false;
    if (this.isEnableOpenServer() != other.isEnableOpenServer()) return false;
    if (this.isEnableUserDeactivate() != other.isEnableUserDeactivate()) return false;
    if (this.isEnableCustomBrand() != other.isEnableCustomBrand()) return false;
    if (this.getUserStatusAwayTimeout() != other.getUserStatusAwayTimeout()) return false;
    if (this.getMaxChannelsPerTeam() != other.getMaxChannelsPerTeam()) return false;
    if (this.getMaxNotificationsPerChannel() != other.getMaxNotificationsPerChannel()) return false;
    if (this.isEnableXtoLeaveChannelsFromLhs() != other.isEnableXtoLeaveChannelsFromLhs()) return false;
    if (this.isExperimentalTownSquareIsReadOnly() != other.isExperimentalTownSquareIsReadOnly()) return false;
    if (this.isEnableConfirmNotificationsToChannel() != other.isEnableConfirmNotificationsToChannel()) return false;
    if (this.isExperimentalEnableAutomaticReplies() != other.isExperimentalEnableAutomaticReplies()) return false;
    if (this.isEnableUserDeactivation() != other.isEnableUserDeactivation()) return false;
    if (this.isExperimentalHideTownSquareinLhs() != other.isExperimentalHideTownSquareinLhs()) return false;
    if (this.isExperimentalViewArchivedChannels() != other.isExperimentalViewArchivedChannels()) return false;
    if (this.isLockTeammateNameDisplay() != other.isLockTeammateNameDisplay()) return false;
    final java.lang.Object this$siteName = this.getSiteName();
    final java.lang.Object other$siteName = other.getSiteName();
    if (this$siteName == null ? other$siteName != null : !this$siteName.equals(other$siteName)) return false;
    final java.lang.Object this$restrictCreationToDomains = this.getRestrictCreationToDomains();
    final java.lang.Object other$restrictCreationToDomains = other.getRestrictCreationToDomains();
    if (this$restrictCreationToDomains == null ? other$restrictCreationToDomains != null : !this$restrictCreationToDomains.equals(other$restrictCreationToDomains)) return false;
    final java.lang.Object this$customBrandText = this.getCustomBrandText();
    final java.lang.Object other$customBrandText = other.getCustomBrandText();
    if (this$customBrandText == null ? other$customBrandText != null : !this$customBrandText.equals(other$customBrandText)) return false;
    final java.lang.Object this$customDescriptionText = this.getCustomDescriptionText();
    final java.lang.Object other$customDescriptionText = other.getCustomDescriptionText();
    if (this$customDescriptionText == null ? other$customDescriptionText != null : !this$customDescriptionText.equals(other$customDescriptionText)) return false;
    final java.lang.Object this$restrictDirectMessage = this.getRestrictDirectMessage();
    final java.lang.Object other$restrictDirectMessage = other.getRestrictDirectMessage();
    if (this$restrictDirectMessage == null ? other$restrictDirectMessage != null : !this$restrictDirectMessage.equals(other$restrictDirectMessage)) return false;
    final java.lang.Object this$restrictTeamInvite = this.getRestrictTeamInvite();
    final java.lang.Object other$restrictTeamInvite = other.getRestrictTeamInvite();
    if (this$restrictTeamInvite == null ? other$restrictTeamInvite != null : !this$restrictTeamInvite.equals(other$restrictTeamInvite)) return false;
    final java.lang.Object this$restrictPublicChannelManagement = this.getRestrictPublicChannelManagement();
    final java.lang.Object other$restrictPublicChannelManagement = other.getRestrictPublicChannelManagement();
    if (this$restrictPublicChannelManagement == null ? other$restrictPublicChannelManagement != null : !this$restrictPublicChannelManagement.equals(other$restrictPublicChannelManagement)) return false;
    final java.lang.Object this$restrictPrivateChannelManagement = this.getRestrictPrivateChannelManagement();
    final java.lang.Object other$restrictPrivateChannelManagement = other.getRestrictPrivateChannelManagement();
    if (this$restrictPrivateChannelManagement == null ? other$restrictPrivateChannelManagement != null : !this$restrictPrivateChannelManagement.equals(other$restrictPrivateChannelManagement)) return false;
    final java.lang.Object this$restrictPublicChannelCreation = this.getRestrictPublicChannelCreation();
    final java.lang.Object other$restrictPublicChannelCreation = other.getRestrictPublicChannelCreation();
    if (this$restrictPublicChannelCreation == null ? other$restrictPublicChannelCreation != null : !this$restrictPublicChannelCreation.equals(other$restrictPublicChannelCreation)) return false;
    final java.lang.Object this$restrictPrivateChannelCreation = this.getRestrictPrivateChannelCreation();
    final java.lang.Object other$restrictPrivateChannelCreation = other.getRestrictPrivateChannelCreation();
    if (this$restrictPrivateChannelCreation == null ? other$restrictPrivateChannelCreation != null : !this$restrictPrivateChannelCreation.equals(other$restrictPrivateChannelCreation)) return false;
    final java.lang.Object this$restrictPublicChannelDeletion = this.getRestrictPublicChannelDeletion();
    final java.lang.Object other$restrictPublicChannelDeletion = other.getRestrictPublicChannelDeletion();
    if (this$restrictPublicChannelDeletion == null ? other$restrictPublicChannelDeletion != null : !this$restrictPublicChannelDeletion.equals(other$restrictPublicChannelDeletion)) return false;
    final java.lang.Object this$restrictPrivateChannelDeletion = this.getRestrictPrivateChannelDeletion();
    final java.lang.Object other$restrictPrivateChannelDeletion = other.getRestrictPrivateChannelDeletion();
    if (this$restrictPrivateChannelDeletion == null ? other$restrictPrivateChannelDeletion != null : !this$restrictPrivateChannelDeletion.equals(other$restrictPrivateChannelDeletion)) return false;
    final java.lang.Object this$restrictPrivateChannelManageMembers = this.getRestrictPrivateChannelManageMembers();
    final java.lang.Object other$restrictPrivateChannelManageMembers = other.getRestrictPrivateChannelManageMembers();
    if (this$restrictPrivateChannelManageMembers == null ? other$restrictPrivateChannelManageMembers != null : !this$restrictPrivateChannelManageMembers.equals(other$restrictPrivateChannelManageMembers)) return false;
    final java.lang.Object this$teammateNameDisplay = this.getTeammateNameDisplay();
    final java.lang.Object other$teammateNameDisplay = other.getTeammateNameDisplay();
    if (this$teammateNameDisplay == null ? other$teammateNameDisplay != null : !this$teammateNameDisplay.equals(other$teammateNameDisplay)) return false;
    final java.lang.Object this$experimentalPrimaryTeam = this.getExperimentalPrimaryTeam();
    final java.lang.Object other$experimentalPrimaryTeam = other.getExperimentalPrimaryTeam();
    if (this$experimentalPrimaryTeam == null ? other$experimentalPrimaryTeam != null : !this$experimentalPrimaryTeam.equals(other$experimentalPrimaryTeam)) return false;
    final java.lang.Object this$experimentalDefaultChannels = this.getExperimentalDefaultChannels();
    final java.lang.Object other$experimentalDefaultChannels = other.getExperimentalDefaultChannels();
    if (this$experimentalDefaultChannels == null ? other$experimentalDefaultChannels != null : !this$experimentalDefaultChannels.equals(other$experimentalDefaultChannels)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof TeamSettings;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getMaxUsersPerTeam();
    result = result * PRIME + (this.isEnableTeamCreation() ? 79 : 97);
    result = result * PRIME + (this.isEnableUserCreation() ? 79 : 97);
    result = result * PRIME + (this.isEnableOpenServer() ? 79 : 97);
    result = result * PRIME + (this.isEnableUserDeactivate() ? 79 : 97);
    result = result * PRIME + (this.isEnableCustomBrand() ? 79 : 97);
    final long $userStatusAwayTimeout = this.getUserStatusAwayTimeout();
    result = result * PRIME + (int) ($userStatusAwayTimeout >>> 32 ^ $userStatusAwayTimeout);
    final long $maxChannelsPerTeam = this.getMaxChannelsPerTeam();
    result = result * PRIME + (int) ($maxChannelsPerTeam >>> 32 ^ $maxChannelsPerTeam);
    final long $maxNotificationsPerChannel = this.getMaxNotificationsPerChannel();
    result = result * PRIME + (int) ($maxNotificationsPerChannel >>> 32 ^ $maxNotificationsPerChannel);
    result = result * PRIME + (this.isEnableXtoLeaveChannelsFromLhs() ? 79 : 97);
    result = result * PRIME + (this.isExperimentalTownSquareIsReadOnly() ? 79 : 97);
    result = result * PRIME + (this.isEnableConfirmNotificationsToChannel() ? 79 : 97);
    result = result * PRIME + (this.isExperimentalEnableAutomaticReplies() ? 79 : 97);
    result = result * PRIME + (this.isEnableUserDeactivation() ? 79 : 97);
    result = result * PRIME + (this.isExperimentalHideTownSquareinLhs() ? 79 : 97);
    result = result * PRIME + (this.isExperimentalViewArchivedChannels() ? 79 : 97);
    result = result * PRIME + (this.isLockTeammateNameDisplay() ? 79 : 97);
    final java.lang.Object $siteName = this.getSiteName();
    result = result * PRIME + ($siteName == null ? 43 : $siteName.hashCode());
    final java.lang.Object $restrictCreationToDomains = this.getRestrictCreationToDomains();
    result = result * PRIME + ($restrictCreationToDomains == null ? 43 : $restrictCreationToDomains.hashCode());
    final java.lang.Object $customBrandText = this.getCustomBrandText();
    result = result * PRIME + ($customBrandText == null ? 43 : $customBrandText.hashCode());
    final java.lang.Object $customDescriptionText = this.getCustomDescriptionText();
    result = result * PRIME + ($customDescriptionText == null ? 43 : $customDescriptionText.hashCode());
    final java.lang.Object $restrictDirectMessage = this.getRestrictDirectMessage();
    result = result * PRIME + ($restrictDirectMessage == null ? 43 : $restrictDirectMessage.hashCode());
    final java.lang.Object $restrictTeamInvite = this.getRestrictTeamInvite();
    result = result * PRIME + ($restrictTeamInvite == null ? 43 : $restrictTeamInvite.hashCode());
    final java.lang.Object $restrictPublicChannelManagement = this.getRestrictPublicChannelManagement();
    result = result * PRIME + ($restrictPublicChannelManagement == null ? 43 : $restrictPublicChannelManagement.hashCode());
    final java.lang.Object $restrictPrivateChannelManagement = this.getRestrictPrivateChannelManagement();
    result = result * PRIME + ($restrictPrivateChannelManagement == null ? 43 : $restrictPrivateChannelManagement.hashCode());
    final java.lang.Object $restrictPublicChannelCreation = this.getRestrictPublicChannelCreation();
    result = result * PRIME + ($restrictPublicChannelCreation == null ? 43 : $restrictPublicChannelCreation.hashCode());
    final java.lang.Object $restrictPrivateChannelCreation = this.getRestrictPrivateChannelCreation();
    result = result * PRIME + ($restrictPrivateChannelCreation == null ? 43 : $restrictPrivateChannelCreation.hashCode());
    final java.lang.Object $restrictPublicChannelDeletion = this.getRestrictPublicChannelDeletion();
    result = result * PRIME + ($restrictPublicChannelDeletion == null ? 43 : $restrictPublicChannelDeletion.hashCode());
    final java.lang.Object $restrictPrivateChannelDeletion = this.getRestrictPrivateChannelDeletion();
    result = result * PRIME + ($restrictPrivateChannelDeletion == null ? 43 : $restrictPrivateChannelDeletion.hashCode());
    final java.lang.Object $restrictPrivateChannelManageMembers = this.getRestrictPrivateChannelManageMembers();
    result = result * PRIME + ($restrictPrivateChannelManageMembers == null ? 43 : $restrictPrivateChannelManageMembers.hashCode());
    final java.lang.Object $teammateNameDisplay = this.getTeammateNameDisplay();
    result = result * PRIME + ($teammateNameDisplay == null ? 43 : $teammateNameDisplay.hashCode());
    final java.lang.Object $experimentalPrimaryTeam = this.getExperimentalPrimaryTeam();
    result = result * PRIME + ($experimentalPrimaryTeam == null ? 43 : $experimentalPrimaryTeam.hashCode());
    final java.lang.Object $experimentalDefaultChannels = this.getExperimentalDefaultChannels();
    result = result * PRIME + ($experimentalDefaultChannels == null ? 43 : $experimentalDefaultChannels.hashCode());
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "TeamSettings(siteName=" + this.getSiteName() + ", maxUsersPerTeam=" + this.getMaxUsersPerTeam() + ", enableTeamCreation=" + this.isEnableTeamCreation() + ", enableUserCreation=" + this.isEnableUserCreation() + ", enableOpenServer=" + this.isEnableOpenServer() + ", enableUserDeactivate=" + this.isEnableUserDeactivate() + ", restrictCreationToDomains=" + this.getRestrictCreationToDomains() + ", enableCustomBrand=" + this.isEnableCustomBrand() + ", customBrandText=" + this.getCustomBrandText() + ", customDescriptionText=" + this.getCustomDescriptionText() + ", restrictDirectMessage=" + this.getRestrictDirectMessage() + ", restrictTeamInvite=" + this.getRestrictTeamInvite() + ", restrictPublicChannelManagement=" + this.getRestrictPublicChannelManagement() + ", restrictPrivateChannelManagement=" + this.getRestrictPrivateChannelManagement() + ", restrictPublicChannelCreation=" + this.getRestrictPublicChannelCreation() + ", restrictPrivateChannelCreation=" + this.getRestrictPrivateChannelCreation() + ", restrictPublicChannelDeletion=" + this.getRestrictPublicChannelDeletion() + ", restrictPrivateChannelDeletion=" + this.getRestrictPrivateChannelDeletion() + ", restrictPrivateChannelManageMembers=" + this.getRestrictPrivateChannelManageMembers() + ", userStatusAwayTimeout=" + this.getUserStatusAwayTimeout() + ", maxChannelsPerTeam=" + this.getMaxChannelsPerTeam() + ", maxNotificationsPerChannel=" + this.getMaxNotificationsPerChannel() + ", teammateNameDisplay=" + this.getTeammateNameDisplay() + ", enableXtoLeaveChannelsFromLhs=" + this.isEnableXtoLeaveChannelsFromLhs() + ", experimentalTownSquareIsReadOnly=" + this.isExperimentalTownSquareIsReadOnly() + ", enableConfirmNotificationsToChannel=" + this.isEnableConfirmNotificationsToChannel() + ", experimentalPrimaryTeam=" + this.getExperimentalPrimaryTeam() + ", experimentalEnableAutomaticReplies=" + this.isExperimentalEnableAutomaticReplies() + ", enableUserDeactivation=" + this.isEnableUserDeactivation() + ", experimentalHideTownSquareinLhs=" + this.isExperimentalHideTownSquareinLhs() + ", experimentalViewArchivedChannels=" + this.isExperimentalViewArchivedChannels() + ", experimentalDefaultChannels=" + this.getExperimentalDefaultChannels() + ", lockTeammateNameDisplay=" + this.isLockTeammateNameDisplay() + ")";
  }
}
