// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * Copyright (c) 2016-present, Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model.config;

/**
 * Password settings.
 * 
 * @author Takayuki Maruyama
 */
public class PasswordSettings {
  private int minimumLength;
  private boolean lowercase;
  private boolean number;
  private boolean uppercase;
  private boolean symbol;

  @java.lang.SuppressWarnings("all")
  public PasswordSettings() {
  }

  @java.lang.SuppressWarnings("all")
  public int getMinimumLength() {
    return this.minimumLength;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isLowercase() {
    return this.lowercase;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isNumber() {
    return this.number;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isUppercase() {
    return this.uppercase;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isSymbol() {
    return this.symbol;
  }

  @java.lang.SuppressWarnings("all")
  public void setMinimumLength(final int minimumLength) {
    this.minimumLength = minimumLength;
  }

  @java.lang.SuppressWarnings("all")
  public void setLowercase(final boolean lowercase) {
    this.lowercase = lowercase;
  }

  @java.lang.SuppressWarnings("all")
  public void setNumber(final boolean number) {
    this.number = number;
  }

  @java.lang.SuppressWarnings("all")
  public void setUppercase(final boolean uppercase) {
    this.uppercase = uppercase;
  }

  @java.lang.SuppressWarnings("all")
  public void setSymbol(final boolean symbol) {
    this.symbol = symbol;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof PasswordSettings)) return false;
    final PasswordSettings other = (PasswordSettings) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    if (this.getMinimumLength() != other.getMinimumLength()) return false;
    if (this.isLowercase() != other.isLowercase()) return false;
    if (this.isNumber() != other.isNumber()) return false;
    if (this.isUppercase() != other.isUppercase()) return false;
    if (this.isSymbol() != other.isSymbol()) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof PasswordSettings;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getMinimumLength();
    result = result * PRIME + (this.isLowercase() ? 79 : 97);
    result = result * PRIME + (this.isNumber() ? 79 : 97);
    result = result * PRIME + (this.isUppercase() ? 79 : 97);
    result = result * PRIME + (this.isSymbol() ? 79 : 97);
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "PasswordSettings(minimumLength=" + this.getMinimumLength() + ", lowercase=" + this.isLowercase() + ", number=" + this.isNumber() + ", uppercase=" + this.isUppercase() + ", symbol=" + this.isSymbol() + ")";
  }
}
