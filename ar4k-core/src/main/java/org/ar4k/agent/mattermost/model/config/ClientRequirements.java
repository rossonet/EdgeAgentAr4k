// Generated by delombok at Sun Apr 18 22:20:18 CEST 2021
/*
 * Copyright (c) 2017 Takayuki Maruyama
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.ar4k.agent.mattermost.model.config;

/**
 * Client requirements settings.
 * 
 * @author Takayuki Maruyama
 * @since Mattermost Server 4.2
 */
public class ClientRequirements {
  private String androidLatestVersion;
  private String androidMinVersion;
  private String desktopLatestVersion;
  private String desktopMinVersion;
  private String iosLatestVersion;
  private String iosMinVersion;

  @java.lang.SuppressWarnings("all")
  public ClientRequirements() {
  }

  @java.lang.SuppressWarnings("all")
  public String getAndroidLatestVersion() {
    return this.androidLatestVersion;
  }

  @java.lang.SuppressWarnings("all")
  public String getAndroidMinVersion() {
    return this.androidMinVersion;
  }

  @java.lang.SuppressWarnings("all")
  public String getDesktopLatestVersion() {
    return this.desktopLatestVersion;
  }

  @java.lang.SuppressWarnings("all")
  public String getDesktopMinVersion() {
    return this.desktopMinVersion;
  }

  @java.lang.SuppressWarnings("all")
  public String getIosLatestVersion() {
    return this.iosLatestVersion;
  }

  @java.lang.SuppressWarnings("all")
  public String getIosMinVersion() {
    return this.iosMinVersion;
  }

  @java.lang.SuppressWarnings("all")
  public void setAndroidLatestVersion(final String androidLatestVersion) {
    this.androidLatestVersion = androidLatestVersion;
  }

  @java.lang.SuppressWarnings("all")
  public void setAndroidMinVersion(final String androidMinVersion) {
    this.androidMinVersion = androidMinVersion;
  }

  @java.lang.SuppressWarnings("all")
  public void setDesktopLatestVersion(final String desktopLatestVersion) {
    this.desktopLatestVersion = desktopLatestVersion;
  }

  @java.lang.SuppressWarnings("all")
  public void setDesktopMinVersion(final String desktopMinVersion) {
    this.desktopMinVersion = desktopMinVersion;
  }

  @java.lang.SuppressWarnings("all")
  public void setIosLatestVersion(final String iosLatestVersion) {
    this.iosLatestVersion = iosLatestVersion;
  }

  @java.lang.SuppressWarnings("all")
  public void setIosMinVersion(final String iosMinVersion) {
    this.iosMinVersion = iosMinVersion;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof ClientRequirements)) return false;
    final ClientRequirements other = (ClientRequirements) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    final java.lang.Object this$androidLatestVersion = this.getAndroidLatestVersion();
    final java.lang.Object other$androidLatestVersion = other.getAndroidLatestVersion();
    if (this$androidLatestVersion == null ? other$androidLatestVersion != null : !this$androidLatestVersion.equals(other$androidLatestVersion)) return false;
    final java.lang.Object this$androidMinVersion = this.getAndroidMinVersion();
    final java.lang.Object other$androidMinVersion = other.getAndroidMinVersion();
    if (this$androidMinVersion == null ? other$androidMinVersion != null : !this$androidMinVersion.equals(other$androidMinVersion)) return false;
    final java.lang.Object this$desktopLatestVersion = this.getDesktopLatestVersion();
    final java.lang.Object other$desktopLatestVersion = other.getDesktopLatestVersion();
    if (this$desktopLatestVersion == null ? other$desktopLatestVersion != null : !this$desktopLatestVersion.equals(other$desktopLatestVersion)) return false;
    final java.lang.Object this$desktopMinVersion = this.getDesktopMinVersion();
    final java.lang.Object other$desktopMinVersion = other.getDesktopMinVersion();
    if (this$desktopMinVersion == null ? other$desktopMinVersion != null : !this$desktopMinVersion.equals(other$desktopMinVersion)) return false;
    final java.lang.Object this$iosLatestVersion = this.getIosLatestVersion();
    final java.lang.Object other$iosLatestVersion = other.getIosLatestVersion();
    if (this$iosLatestVersion == null ? other$iosLatestVersion != null : !this$iosLatestVersion.equals(other$iosLatestVersion)) return false;
    final java.lang.Object this$iosMinVersion = this.getIosMinVersion();
    final java.lang.Object other$iosMinVersion = other.getIosMinVersion();
    if (this$iosMinVersion == null ? other$iosMinVersion != null : !this$iosMinVersion.equals(other$iosMinVersion)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof ClientRequirements;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final java.lang.Object $androidLatestVersion = this.getAndroidLatestVersion();
    result = result * PRIME + ($androidLatestVersion == null ? 43 : $androidLatestVersion.hashCode());
    final java.lang.Object $androidMinVersion = this.getAndroidMinVersion();
    result = result * PRIME + ($androidMinVersion == null ? 43 : $androidMinVersion.hashCode());
    final java.lang.Object $desktopLatestVersion = this.getDesktopLatestVersion();
    result = result * PRIME + ($desktopLatestVersion == null ? 43 : $desktopLatestVersion.hashCode());
    final java.lang.Object $desktopMinVersion = this.getDesktopMinVersion();
    result = result * PRIME + ($desktopMinVersion == null ? 43 : $desktopMinVersion.hashCode());
    final java.lang.Object $iosLatestVersion = this.getIosLatestVersion();
    result = result * PRIME + ($iosLatestVersion == null ? 43 : $iosLatestVersion.hashCode());
    final java.lang.Object $iosMinVersion = this.getIosMinVersion();
    result = result * PRIME + ($iosMinVersion == null ? 43 : $iosMinVersion.hashCode());
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "ClientRequirements(androidLatestVersion=" + this.getAndroidLatestVersion() + ", androidMinVersion=" + this.getAndroidMinVersion() + ", desktopLatestVersion=" + this.getDesktopLatestVersion() + ", desktopMinVersion=" + this.getDesktopMinVersion() + ", iosLatestVersion=" + this.getIosLatestVersion() + ", iosMinVersion=" + this.getIosMinVersion() + ")";
  }
}
