// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.ar4k.agent.tunnels.http.grpc.beacon";
option java_outer_classname = "BeaconMirrorService";
option objc_class_prefix = "AR4K";

package beacon;

service RpcServiceV1 {
  // for agent registration
  rpc Register (RegisterRequest) returns (RegisterReply) {}
  rpc GetConfigTarget (Agent) returns (ConfigReply) {}
  rpc Polling (Agent) returns (FlowMessage) {}
  rpc Subscription (Agent) returns (stream FlowMessage) {}
  rpc SendChatMessage (ChatMessage) returns (Status) {}
  rpc SendCommandReply (CommandReplyRequest) returns (Status) {}
  rpc SendHealth (HealthRequest) returns (Status) {}
  rpc SendLog (LogRequest) returns (Status) {}
  rpc SendException (ExceptionRequest) returns (Status) {}
  rpc OpenBidirectionalSocketTunnel (stream StreamData) returns (stream StreamData) {}
  // for console
  // list agents connected 
  rpc ListAgents (Empty) returns (ListAgentsReply) {}
  // TODO gestione ssl con Beacon
  rpc ListSslAuthorities (Empty) returns (ListSslAuthoritiesReply) {}
  rpc AddSslAuthorities (SslAuthority) returns (Status) {}
  rpc DropSslAuthorities (SslAuthority) returns (Status) {}
   // TODO gestione kick agent con Beacon
  rpc KickAgent (Agent) returns (Status) {}
  // RPC on agent
  rpc ElaborateMessage(ElaborateMessageRequest) returns (ElaborateMessageReply) {}
  rpc ListCommands(ListCommandsRequest) returns (ListCommandsReply) {}
  rpc CompleteCommand(CompleteCommandRequest) returns (CompleteCommandReply) {}
  // TODO network tunnels 
  rpc CreateProxySocksOnAgent(CreateProxySocksOnAgentRequest) returns (TunnelCreatedReply) {}
  rpc ExposeAgentPort(ExposeAgentPortRequest) returns (TunnelCreatedReply) {}
  rpc ListTunnels (Empty) returns (ListTunnelsReply) {}
  rpc CloseTunnel (CloseTunnelRequest) returns (Status) {}
}

message RegisterRequest {
  string name = 1;
  string secretKey = 2;
  Timestamp time = 3;
  string jsonHealth = 4;
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;
  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

message RegisterReply {
  Status result = 1;
  string registerCode = 2;
  int32 monitoringFrequency = 3;
  AnimaStates targetState = 4;
  StatusValue status = 5;
}

message Status {
  StatusValue status = 1;
}

enum StatusValue {
  UNKNOWN = 0;
  GOOD = 1;
  BAD = 2;
  FAULT = 3;
}

enum AnimaStates {
    INIT = 0;
    STARTING = 1;
    STAMINAL = 2;
    CONFIGURED = 3;
    RUNNING = 4;
    SERVICE = 5;
    CONSOLE = 6;
    LAMBDA = 7;
    BOT = 8;
    PAUSED = 9;
    STOPED = 10;
    KILLED = 11;
    FAULTED = 12;
    STASIS = 13;
 }
 
message Agent {
  string agentUniqueName = 1;
  //string hardwareInfoAsJson = 2;
  string secretKey = 2;
  int32 pollingFrequency = 3;
  int64 timestampRegistration = 4;
}
 
message ConfigReply {
  string config = 1;
}

message FlowMessage {
  repeated RequestToAgent toDoList = 1;
}

message RequestToAgent {
  CommandType type = 1;
  Agent caller = 2;
  string uniqueIdRequest = 3;
  string requestCommand = 4;
  repeated string words = 5;
  int32 wordIndex = 6;
  int32 position = 7;
}

enum CommandType {
  ELABORATE_MESSAGE_COMMAND = 0;
  LIST_COMMANDS = 1;
  COMPLETE_COMMAND = 2;
  OPEN_PROXY_SOCKS = 3;
  EXPOSE_PORT = 4;
}

message ChatMessage {
  Agent agentSender = 1;
  Agent agentDestination = 2;
  string messageTxt = 3;
}

message CommandReplyRequest {
  string uniqueIdRequest = 1;
  Agent agentSender = 2;
  Agent agentDestination = 3;
  repeated string replies = 4;
  repeated string errors = 5;
}

message HealthRequest {
  Agent agentSender = 1;
  string hardwareInfo = 2;
}

message LogRequest {
  Agent agentSender = 1;
  LogSeverity severity = 2;
  string logLine = 3;
}

enum LogSeverity {
  // (0) The log entry has no assigned severity level.
  DEFAULT = 0;
  // (100) Debug or trace information.
  DEBUG = 100;
  // (200) Routine information, such as ongoing status or performance.
  INFO = 200;
  // (300) Normal but significant events, such as start up, shut down, or
  // a configuration change.
  NOTICE = 300;
  // (400) Warning events might cause problems.
  WARNING = 400;
  // (500) Error events are likely to cause problems.
  ERROR = 500;
  // (600) Critical events cause more severe problems or outages.
  CRITICAL = 600;
  // (700) A person must take an action immediately.
  ALERT = 700;
  // (800) One or more systems are unusable.
  EMERGENCY = 800;
}

message ExceptionRequest {
  Agent agentSender = 1;
  string messageException = 2;
  string stackTraceException = 3;
}

message StreamData {
  Agent fromAgent = 1;
  Agent toAgent = 2;
  bytes data = 3;
}

message Empty {
}

message ListAgentsReply {
  Status result = 1;
  repeated Agent agents = 2;
}

message ListSslAuthoritiesReply {
  Status result = 1;
  repeated SslAuthority authorities = 2;
}

message SslAuthority {
  string label = 1;
  string description = 2;
  string authorityCa = 3;
}

message ElaborateMessageRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
  string commandMessage = 3;
}

message ElaborateMessageReply {
  string reply = 1;
  repeated string errors = 2;
}

message ListCommandsRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
}

message ListCommandsReply {
  repeated Command commands = 1;
}

message Command {
  Agent agentSender = 1;
  string command = 2 ;
}

message CompleteCommandRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
  repeated string words = 3;
  int32 wordIndex = 4;
  int32 position = 5;
}

message CompleteCommandReply {
  repeated string replies = 1;
  repeated string errors = 2;
}

message CreateProxySocksOnAgentRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
  map<string, string> parameters = 3;
}

message TunnelCreatedReply {
   string uniqueTunnelId = 1;
   Status status = 2;
   Tunnel tunnel = 3;
}

message ExposeAgentPortRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
  map<string, string> parameters = 3;
}

message Tunnel {
  string uniqueTunnelId = 1;
  Agent agentFrom = 2;
  Agent agentTo = 3;
  TunnelType type = 4;
  map<string, string> parameters = 5;
}

enum TunnelType {
  EXPOSE_TCP_PORT = 0;
  GRANT_SOCKS_ACCESS = 1;
}

message ListTunnelsReply {
  repeated Tunnel tunnels = 1;
}

message CloseTunnelRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
  string uniqueTunnelId = 3;
}

service PotServiceV1 {
  rpc sendEvent (MessageEventRequest) returns (Status) {}
  rpc Polling (Agent) returns (FlowMessagePot) {}
  rpc Subscription (Agent) returns (stream FlowMessagePot) {}
}

message MessageEventRequest {
  Agent agentSender = 1;
  EventType eventType = 2;
  map<string,string> eventData = 3;
}

enum EventType {
  FAULT_EVENT = 0;
  INFO_EVENT = 1;
}

message FlowMessagePot {
  repeated RequestToAgentPot toDoList = 1;
}

message RequestToAgentPot {
  CommandTypePot type = 1;
  string uniqueIdRequest = 2;
  string requestCommand = 3;
  map<string,string> requestData = 4;
}

enum CommandTypePot {
  START_POT = 0;
  STOP_POT = 1;
  PAUSE_POT = 2;
  REQUEST_STATUS_POT = 3;
  INSTANTIATE_POT = 4;
}

service DataServiceV1 {
  rpc Polling (RequestPolling) returns (FlowMessageData) {}
  rpc Subscription (RequestSubscription) returns (stream FlowMessageData) {}
  rpc PollingTxt (RequestPolling) returns (FlowMessageDataJson) {}
  rpc SubscriptionTxt (RequestSubscription) returns (stream FlowMessageDataJson) {}
  rpc write (RequestWrite) returns (Status) {}
}

message RequestSubscription {
  string nodeId = 1;
  int32 samplingRate = 2;
  string dataFilter = 3;
}

message RequestPolling {
  string nodeId = 1;
  string dataFilter = 2;
}

message FlowMessageData {
  repeated Data data = 1;
}

message Data {
  string nodeId = 1;
  Timestamp time = 2;
  Status quality = 3;
  DataType type = 4;
  bytes data = 5;
}

message FlowMessageDataJson {
  repeated DataJson data = 1;
}

message DataJson {
  string nodeId = 1;
  Timestamp time = 2;
  Status quality = 3;
  string data = 4;
}

message RequestWrite {
  string nodeId = 1;
  Timestamp time = 2;
  Status quality = 3;
  DataType type = 4;
  bytes data = 5;
}

message RequestWriteText {
  string nodeId = 1;
  Timestamp time = 2;
  Status quality = 3;
  string data = 4;
}

enum DataType {
  STRING = 0;
  INT32 = 1;
  INT64 = 2;
  FLOAT = 3;
  DOUBLE = 4;
  TIMESTAMP = 5;
  BYTES = 6;
}