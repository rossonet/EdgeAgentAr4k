// Andrea Ambrosini - Rossonet s.c.a r.l.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.ar4k.agent.tunnels.http.grpc.beacon";
option java_outer_classname = "BeaconMirrorService";
option objc_class_prefix = "AR4K";

package beacon;

service RpcServiceV1 {
  // for agent registration
  rpc Register (RegisterRequest) returns (RegisterReply) {}
  //rpc GetConfigTarget (Agent) returns (ConfigReply) {} // TODO: implementare la gestione del cambio configurazione e la gestione delle configurazioni su beacon server
  rpc PollingCmdQueue (Agent) returns (FlowMessage) {}
  rpc SubscriptionCmdQueue (Agent) returns (stream FlowMessage) {}
  rpc SendChatMessage (ChatMessage) returns (Status) {}
  rpc SendCommandReply (CommandReplyRequest) returns (Status) {}
  rpc SendHealth (HealthRequest) returns (Status) {}
  rpc SendLog (LogRequest) returns (Status) {}
  rpc SendException (ExceptionRequest) returns (Status) {}
  rpc SendConfigRuntime (ConfigReport) returns (ConfigReply) {}
  // for console
  // list agents connected 
  rpc ListAgents (Empty) returns (ListAgentsReply) {}
  rpc ListAgentsRequestComplete (Empty) returns (ListAgentsRequest) {}
  rpc ListAgentsRequestToDo (Empty) returns (ListAgentsRequest) {}
  rpc ApproveAgentRequest (ApproveAgentRequestRequest) returns (Status) {}
   // TODO gestione kick agent con Beacon
  rpc KickAgent (Agent) returns (Status) {}
  // RPC on agent
  rpc ElaborateMessage(ElaborateMessageRequest) returns (ElaborateMessageReply) {}
  rpc ListCommands(ListCommandsRequest) returns (ListCommandsReply) {}
  rpc CompleteCommand(CompleteCommandRequest) returns (CompleteCommandReply) {}
}

message RegisterRequest {
  string name = 1; // unique name of the agent
  string requestCsr = 2;
  string displayKey = 3;  // password key show in the output of Jar agent
  Timestamp time = 4;
  string jsonHealth = 5;
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;
  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

message RegisterReply {
  string registerCode = 1;  // unique code for the registration on the beacon server
  int32 monitoringFrequency = 2;
  string cert = 3; // TODO: da questo momento la connessione dovrebbe passare in ssl con controllo reciproco dei certificati
  bytes ca = 4;
  Status statusRegistration = 5;
  int64 timestampRegistration = 6;
}

message ListAgentsRequest {
  Status result = 1;
  repeated AgentRequest requests = 2;
}

message AgentRequest {
  RegisterRequest request = 1;
  string idRequest = 2;
  Timestamp approved = 3;
  Timestamp registrationCompleted = 4;
}

message ApproveAgentRequestRequest {
  string idRequest = 1;
  string cert = 2;    // da utilizzare se il certificato viene firmato esternamente
  string note = 3;
}

message Status {
  StatusValue status = 1;
}

enum StatusValue {
  GOOD = 0;
  BAD = 1;
  FAULT = 2;
  WAIT_HUMAN = 3;
}

enum AnimaStates {
    INIT = 0;
    STAMINAL = 1;
    CONFIGURED = 2;
    RUNNING = 3;
    KILLED = 4;
    FAULTED = 5;
    STASIS = 6;
 }
 
message Agent {
  string agentUniqueName = 1;
  //string hardwareInfoAsJson = 2;
  // string registerCode = 2; // ritornato in registrazione
  //int32 pollingFrequency = 3;
  //int64 timestampRegistration = 3;
}
 
message ConfigReply {
  string base64Config = 1;
  int64 restartAt = 2;
}

message ConfigReport {
  Agent agent = 1;
  string base64Config = 2;
  string jsonConfig = 3;
}

message FlowMessage {
  repeated RequestToAgent toDoList = 1;
}

message RequestToAgent {
  CommandType type = 1;
  Agent caller = 2;
  string uniqueIdRequest = 3;
  string requestCommand = 4;
  repeated string words = 5;
  int32 wordIndex = 6;
  int32 position = 7;
}

enum CommandType {
  ELABORATE_MESSAGE_COMMAND = 0;
  LIST_COMMANDS = 1;
  COMPLETE_COMMAND = 2;
  OPEN_PROXY_SOCKS = 3;
  EXPOSE_PORT = 4;
}

message ChatMessage {
  Agent agentSender = 1;
  Agent agentDestination = 2;
  string messageTxt = 3;
}

message CommandReplyRequest {
  string uniqueIdRequest = 1;
  Agent agentSender = 2;
  Agent agentDestination = 3;
  repeated string replies = 4;
  repeated string errors = 5;
}

message HealthRequest {
  Agent agentSender = 1;
  string jsonHardwareInfo = 2;
}

message LogRequest {
  Agent agentSender = 1;
  LogSeverity severity = 2;
  string logLine = 3;
}

enum LogSeverity {
  // (0) The log entry has no assigned severity level.
  DEFAULT = 0;
  // (100) Debug or trace information.
  DEBUG = 100;
  // (200) Routine information, such as ongoing status or performance.
  INFO = 200;
  // (300) Normal but significant events, such as start up, shut down, or
  // a configuration change.
  NOTICE = 300;
  // (400) Warning events might cause problems.
  WARNING = 400;
  // (500) Error events are likely to cause problems.
  ERROR = 500;
  // (600) Critical events cause more severe problems or outages.
  CRITICAL = 600;
  // (700) A person must take an action immediately.
  ALERT = 700;
  // (800) One or more systems are unusable.
  EMERGENCY = 800;
}

message ExceptionRequest {
  Agent agentSender = 1;
  string messageException = 2;
  string stackTraceException = 3;
}
message Empty {
}

message ListAgentsReply {
  Status result = 1;
  repeated Agent agents = 2;
}

message ElaborateMessageRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
  string commandMessage = 3;
}

message ElaborateMessageReply {
  string reply = 1;
  repeated string errors = 2;
}

message ListCommandsRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
}

message ListCommandsReply {
  repeated Command commands = 1;
}

message Command {
  Agent agentSender = 1;
  string command = 2 ;
}

message CompleteCommandRequest {
  Agent agentTarget = 1;
  Agent agentSender = 2;
  repeated string words = 3;
  int32 wordIndex = 4;
  int32 position = 5;
}

message CompleteCommandReply {
  repeated string replies = 1;
  repeated string errors = 2;
}

service DataServiceV1 {
  rpc Polling (PollingRequest) returns (FlowMessageData) {}
  rpc Subscription (SubscribeRequest) returns (stream FlowMessageData) {}
  rpc Write (RequestWrite) returns (FlowMessageData) {}
  rpc SendAddressSpace (AddressSpace) returns (AddressSpace) {}
  rpc GetRemoteAddressSpace (Agent) returns (AddressSpace) {}
}

message PollingRequest {
  Agent agent = 1;
  repeated DataNode dataNodes = 2; // elenco nodi ricercati
}

message SubscribeRequest {
  Agent agent = 1;
  repeated DataNode dataNodes = 2; // elenco nodi ricercati
  int32 samplingRate = 3;
}

message FlowMessageData {
  repeated DataNode values = 1;
  int32 hiSpeedRoutingTag = 2; // sperimentale per indirizzare rapidamente il routing nei grossi volumi
}

message RequestWrite {
 Agent agent = 1;
 repeated DataNode valuesToWrite = 2;
}

message DataNode {
  Agent agentOwner = 1; // chiedo al beacon di un nodo relativo ad un agent
  string nodeId = 2;
  string jsonValue = 3;
  string stringValue = 4;
  bytes byteValue = 5;
  Status quality = 6;
  Timestamp timestamp = 7;
  DataType type = 8;
  repeated string errors = 9;
  Timestamp timeToExpire = 10;
}

message NodeMetadata {
  DataNode dataNode = 1;
  string namespace = 2;
  string domainId = 3;
  repeated string tags = 4;
  repeated ParentScope fatherForScopes = 5;
  repeated string logs = 6;
}

message AddressSpace {
  int64 lastUpdate = 1;
  repeated NodeMetadata nodes = 2;
}

message ParentScope {
  string scope = 1;
  NodeMetadata parent = 2;
}

enum DataType {
  STRING = 0;
  CHAR = 1;
  BYTES = 2;
  INT32 = 3;
  INT64 = 4;
  FLOAT = 5;
  DOUBLE = 6;
  BOOLEAN = 7;
  TIMESTAMP = 8;
  OBJECT = 9;
  UNKNOWN = 10;
}